# ansible-playbook deploy.yaml -i inventories/prod/hosts --vault-id ~/.tokens/master_id

- hosts: all
  strategy: free
  roles:
    - common
  tasks:

    - include_role:
        name: common
        tasks_from: make_config_dir

    - include_role:
        name: common
        tasks_from: make_data_dir

    - name: Create and set permissions on all the top-level data directories
      file:
        path: '{{ data_dir }}/{{ server.name }}'
        state: directory
        mode: '0755'
        owner: automation
        group: automation
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ data_dir }}/{{ item.name }}'

    - name: Create and set permissions on all the top-level config directories
      file:
        path: '{{ config_dir }}/{{ server.name }}'
        state: directory
        mode: '0755'
        owner: automation
        group: automation
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ config_dir }}/{{ item.name }}'

    - name: Create all the save directories
      file:
        path: '{{ data_dir }}/{{ server.name }}/saves'
        state: directory
        mode: '0755'
        owner: root
        group: root
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ data_dir }}/{{ item.name }}/saves'
      become: yes

    - name: Create all the server directories
      file:
        path: '{{ data_dir }}/{{ server.name }}/server'
        state: directory
        mode: '0755'
        owner: root
        group: root
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ data_dir }}/{{ item.name }}/server'
      become: yes

    - name: Render the .env files
      template:
        src: .env.j2
        dest: '{{ config_dir }}/{{ server.name }}/.env'
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ config_dir }}/{{ item.name }}/.env'

    - include_role:
        name: docker
        tasks_from: stack_deploy

    - name: Allow server ports
      ufw:
        rule: allow
        port: "{{ server.port }}"
        proto: udp
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ item.port }}'
      become: yes

    - name: Allow server ports +1
      ufw:
        rule: allow
        port: "{{ server.port + 1 }}"
        proto: udp
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ item.port + 1 }}'
      become: yes

    - name: Allow server ports +2
      ufw:
        rule: allow
        port: "{{ server.port + 2 }}"
        proto: udp
      vars:
        server: '{{ item }}'
      with_items: '{{ servers }}'
      loop_control:
        label: '{{ item.port + 2 }}'
      become: yes

    - name: Reload Firewall and enable at boot
      ufw:
        state: enabled
        policy: deny
      become: yes


